package highlands.worldgen.layer;

import org.apache.logging.log4j.Level;

import highlands.Logs;
import highlands.api.HighlandsBiomes;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerHillsHL extends GenLayer
{
    private GenLayer river;
    private int[] islandBiomeIDs;

    public GenLayerHillsHL(long par1, GenLayer par3, GenLayer par4)
    {
        super(par1);
        this.parent = par3;
        this.river = par4;
        setIslandBiomes();
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    @Override
    public int[] getInts(int par1, int par2, int par3, int par4)
    {    	
        int[] aint = this.parent.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
        int[] aint1 = this.river.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
        int[] aint2 = IntCache.getIntCache(par3 * par4);

        for (int i1 = 0; i1 < par4; ++i1)
        {
            for (int j1 = 0; j1 < par3; ++j1)
            {
                this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2));
                int k1 = aint[j1 + 1 + (i1 + 1) * (par3 + 2)];
                int l1 = aint1[j1 + 1 + (i1 + 1) * (par3 + 2)];
                boolean flag = (l1 - 2) % 29 == 0;
                
                //BiomeGenBase biome2 = BiomeGenBase.getBiomeGenArray()[aint1[j1 + i1 * par3]];
                //Logs.log(Level.INFO, "[Highlands] GenLayerRareBiomeHL input=" + biome2.biomeName);

                if (k1 > 255)
                {
                	//Logs.log(Level.INFO, "[Highlands] GenLayerRareBiomeHL k1=" + k1);
                }

                // parent not ocean &&
                // river not plains or ocean &&
                // river is megaTaiga
                // parent less than 128
                //if (k1 != 0 && l1 >= 2 && (l1 - 2) % 29 == 1 && k1 < 128)
                if (k1 != 0 && l1 >= 2 && l1 == 32 && k1 < 128)
                {
                    if (BiomeGenBase.getBiome(k1 + 128) != null)
                    {
                        aint2[j1 + i1 * par3] = k1 + 128;
                    }
                    else
                    {
                        aint2[j1 + i1 * par3] = k1;
                    }
                }
                else if (this.nextInt(3) != 0 && !flag)
                {
                    aint2[j1 + i1 * par3] = k1;
                }
                else
                {
                    int i2 = k1;
                    int j2;

                    if (k1 == BiomeGenBase.desert.biomeID)
                    {
                        i2 = BiomeGenBase.desertHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.forest.biomeID)
                    {
                        i2 = BiomeGenBase.forestHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.birchForest.biomeID)
                    {
                        i2 = BiomeGenBase.birchForestHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.roofedForest.biomeID)
                    {
                        i2 = BiomeGenBase.plains.biomeID;
                    }
                    else if (k1 == BiomeGenBase.taiga.biomeID)
                    {
                        i2 = BiomeGenBase.taigaHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.megaTaiga.biomeID)
                    {
                        i2 = BiomeGenBase.megaTaigaHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.coldTaiga.biomeID)
                    {
                        i2 = BiomeGenBase.coldTaigaHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.plains.biomeID)
                    {
                        if (this.nextInt(3) == 0)
                        {
                            i2 = BiomeGenBase.forestHills.biomeID;
                        }
                        else
                        {
                            i2 = BiomeGenBase.forest.biomeID;
                        }
                    }
                    else if (k1 == BiomeGenBase.icePlains.biomeID)
                    {
                        i2 = BiomeGenBase.iceMountains.biomeID;
                    }
                    else if (k1 == BiomeGenBase.jungle.biomeID)
                    {
                        i2 = BiomeGenBase.jungleHills.biomeID;
                    }
                    else if (k1 == BiomeGenBase.ocean.biomeID)
                    {
                        i2 = BiomeGenBase.deepOcean.biomeID;
                    }
                    else if (k1 == BiomeGenBase.extremeHills.biomeID)
                    {
                        i2 = BiomeGenBase.extremeHillsPlus.biomeID;
                    }
                    else if (k1 == BiomeGenBase.savanna.biomeID)
                    {
                        i2 = BiomeGenBase.savannaPlateau.biomeID;
                    }
                    else if (compareBiomesById(k1, BiomeGenBase.mesaPlateau_F.biomeID))
                    {
                        i2 = BiomeGenBase.mesa.biomeID;
                    }
                    // update to support multiple ocean and island biomes
                    else if ( (k1 == BiomeGenBase.deepOcean.biomeID || isHLOcean(k1)) && this.nextInt(4) == 0) // was 3
                    {
                    	//islands                  	
                    	j2 = this.nextInt(islandBiomeIDs.length);
                    	i2 = islandBiomeIDs[j2];
                    	
                    	flag = false; //crash fix ?
                    	//Logs.log(Level.ERROR, "GenLayerHillsHL.islandBiome="+i2);
                    }

                    if (flag && i2 != k1)
                    {
                    	// make apply to vanilla biomes only
                        if (i2 < 40 && BiomeGenBase.getBiome(i2 + 128) != null)
                        {
                            i2 += 128;
                        }
                        else
                        {
                            i2 = k1;
                        }
                    }

                    if (i2 == k1)
                    {
                        aint2[j1 + i1 * par3] = k1;
                    }
                    else
                    {
                        j2 = aint[j1 + 1 + (i1 + 1 - 1) * (par3 + 2)];
                        int k2 = aint[j1 + 1 + 1 + (i1 + 1) * (par3 + 2)];
                        int l2 = aint[j1 + 1 - 1 + (i1 + 1) * (par3 + 2)];
                        int i3 = aint[j1 + 1 + (i1 + 1 + 1) * (par3 + 2)];
                        int j3 = 0;

                        if (compareBiomesById(j2, k1))
                        {
                            ++j3;
                        }

                        if (compareBiomesById(k2, k1))
                        {
                            ++j3;
                        }

                        if (compareBiomesById(l2, k1))
                        {
                            ++j3;
                        }

                        if (compareBiomesById(i3, k1))
                        {
                            ++j3;
                        }

                        if (j3 >= 3)
                        {
                            aint2[j1 + i1 * par3] = i2;
                        }
                        else
                        {
                            aint2[j1 + i1 * par3] = k1;
                        }
                    }
                }
            }
        }

        return aint2;
    }
    
    private void setIslandBiomes () {
    	if (islandBiomeIDs != null) return;
    	
    	int[] available = new int[8];
    	int total = 0;
    	
    	if (BiomeGenBase.plains != null) { // original GenLayerHills biome
    		available[total] = BiomeGenBase.plains.biomeID;
        	total++;
    	}    	
        if (HighlandsBiomes.jungleIsland != null) {
        	available[total] = HighlandsBiomes.jungleIsland.biomeID;
        	total++;
        }
        if (HighlandsBiomes.forestIsland != null) { // replaces original GenLayerHills biome
        	available[total] = HighlandsBiomes.forestIsland.biomeID;
        	total++;
        }
        if (HighlandsBiomes.desertIsland != null) {
        	available[total] = HighlandsBiomes.desertIsland.biomeID;
        	total++;
        }
        if (HighlandsBiomes.snowIsland != null) {
        	available[total] = HighlandsBiomes.snowIsland.biomeID;
        	total++;
        }
        if (HighlandsBiomes.volcanoIsland != null) {
        	available[total] = HighlandsBiomes.volcanoIsland.biomeID;
        	total++;
        }
        if (HighlandsBiomes.rockIsland != null) {
        	available[total] = HighlandsBiomes.rockIsland.biomeID;
        	total++;
        }
        if (HighlandsBiomes.windyIsland != null) {
        	available[total] = HighlandsBiomes.windyIsland.biomeID;
        	total++;
        }
        
        islandBiomeIDs = new int[total];
        int counter = 0;
        for (int i=0; i<total; i++) {
        	if (available[i] > 0) {
        		islandBiomeIDs[counter] = available[i];
        		counter++;
        	}
        }
    }
    
    private boolean isHLOcean(int biomeID){
    	if (HighlandsBiomes.ocean2 != null) {
    		return biomeID == HighlandsBiomes.ocean2.biomeID;
    	}
    	return false;
    }
}
