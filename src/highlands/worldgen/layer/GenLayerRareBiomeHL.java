package highlands.worldgen.layer;

//import org.apache.logging.log4j.Level;

//import highlands.Logs;
import highlands.api.HighlandsBiomes;
import highlands.biome.BiomeGenBaseHighlands;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.GenLayerRareBiome;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerRareBiomeHL extends GenLayer {// partial replacement for GenLayerHillsHL
	private boolean highlandsFlag;
	
	public GenLayerRareBiomeHL(long par1, GenLayer par3GenLayer)
    {
        super(par1);
        this.parent = par3GenLayer;
        highlandsFlag = true;
    }

	/**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
	@Override
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
		// Logs.log(Level.INFO, "[Highlands] GenLayerRareBiomeHL called, parent ="+this.parent);
		
		
        int[] aint = this.parent.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i1 = 0; i1 < par4; ++i1)
        {
            for (int j1 = 0; j1 < par3; ++j1)
            {
                this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2));
                int k1 = aint[j1 + 1 + (i1 + 1) * (par3 + 2)];
                
                //BiomeGenBase biome2 = BiomeGenBase.getBiomeGenArray()[aint1[j1 + i1 * par3]];
                if (k1 > 255) {
                	//Logs.log(Level.INFO, "[Highlands] GenLayerRareBiomeHL input=" + k1);
                }

                // nextInt(57)
                if (this.nextInt(3) == 0)
                {
                	// Sunflower Plains rare biome
                    if (k1 == BiomeGenBase.plains.biomeID)
                    {
                        aint1[j1 + i1 * par3] = BiomeGenBase.plains.biomeID + 128;
                    }
                    else if(k1 != HighlandsBiomes.ocean2.biomeID && BiomeGenBase.getBiome(k1) instanceof BiomeGenBaseHighlands){
                    	int var10 = k1;
                    	BiomeGenBaseHighlands biome = (BiomeGenBaseHighlands)BiomeGenBase.getBiome(k1);
                    	if(biome.subBiomes.size() > 0){
                    		var10 = biome.subBiomes.get(this.nextInt(biome.subBiomes.size())).biomeID;
                    		//if (var10 > 256) {
                    		//	Logs.log(Level.INFO, "[Highlands] GenLayerRareBiomeHL fatal error with subBiome for "+biome);
                    		//}
                    		aint1[j1 + i1 * par3] = var10;
                    		//Logs.log(Level.INFO, "[Highlands] Sub biome parent: " + biome.biomeName + "  sub: " + var10);
                    		//Logs.log(Level.INFO, "[Highlands] Sub biome parent: " + biome.biomeName + "  sub: " + BiomeGenBase.getBiomeGenArray()[var10].biomeName);
                    	}
                    	//else Logs.log(Level.INFO, "[Highlands] " + biome.biomeName + " has no sub-biomes.");
                    }
                    else
                    {
                        aint1[j1 + i1 * par3] = k1;
                    }
                }
                else
                {
                    aint1[j1 + i1 * par3] = k1;
                }
                //biome2 = BiomeGenBase.getBiomeGenArray()[aint1[j1 + i1 * par3]];
                //Logs.log(Level.INFO, "[Highlands] GenLayerRareBiomeHL output=" + biome2.biomeName);
            }
        }

        return aint1;
    }
}
